package com.tss.jpa.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.tss.jpa.dto.StudentRequestDto;
import com.tss.jpa.dto.StudentResponseDto;
import com.tss.jpa.dto.StudentResponsePage;
import com.tss.jpa.entity.Student;
import com.tss.jpa.error.ResponseError;
import com.tss.jpa.exception.StudentApiException;
import com.tss.jpa.service.StudentService;

@RestController
@RequestMapping("/studentapp")
public class StudentController {

    @Autowired
    private StudentService studentService;

    // ✅ Pagination endpoint
    @GetMapping("/students")
    public ResponseEntity<StudentResponsePage> readAllStudents(
            @RequestParam int pagesize,
            @RequestParam int pageno) {
        return ResponseEntity.ok(studentService.readAllStudents(pagesize, pageno));
    }

    // ✅ Create student
    @PostMapping("/students")
    public StudentResponseDto addNewStudent(@RequestBody StudentRequestDto student) {
        return studentService.addNewStudent(student);
    }

    // ✅ Get by ID (throws exception if not found)
    @GetMapping("/students/{studentId}")
    public ResponseEntity<Student> readStudentById(@PathVariable int studentId) {
        return ResponseEntity.ok(studentService.readStudentById(studentId));
    }

    // ✅ Get by name (throws exception if empty)
    @GetMapping("/students/name")
    public ResponseEntity<List<Student>> getStudentsByName(@RequestParam String firstName) {
        return ResponseEntity.ok(studentService.readStudentsByName(firstName));
    }

    // ✅ Error handling
    @ExceptionHandler
    public ResponseEntity<ResponseError> handleStudentException(StudentApiException exception) {
        ResponseError error = new ResponseError();
        error.setMessage(exception.getMessage());
        error.setStatus(HttpStatus.NOT_FOUND.value());
        error.setTimeStamp(System.currentTimeMillis());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }
}

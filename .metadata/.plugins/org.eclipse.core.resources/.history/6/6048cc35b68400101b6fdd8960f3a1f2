package com.tss.jpa.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.tss.jpa.dto.StudentRequestDto;
import com.tss.jpa.dto.StudentResponseDto;
import com.tss.jpa.dto.StudentResponsePage;
import com.tss.jpa.entity.Student;
import com.tss.jpa.repository.StudentRepository;

@Service
public class StudentServiceImpl implements StudentService {

	@Autowired
	private StudentRepository studentRepo;
	
	@Autowired
	private ModelMapper mapper;

	@Override
	public StudentResponsePage readAllStudents(int pagesize, int pageno) {

		Pageable pagable = PageRequest.of(pageno, pagesize);
		Page<Student> studentPage = studentRepo.findAll(pagable);
		
		StudentResponsePage studentResponse = new StudentResponsePage();
		
		studentResponse.setTotalElements(studentPage.getTotalElements());
		studentResponse.setSize(studentPage.getSize());
		studentResponse.setTotalPages(studentPage.getTotalPages());
		studentResponse.setLastPage(studentPage.isLast());
			
		
		List<Student> dbStudents = studentRepo.findAll();
		
	    List<StudentResponseDto> contents = new ArrayList<>();

		for (Student student : studentPage.getContent()) {
	
	        contents.add(studentToStudentResponseDto(student));
		}

	    studentResponse.setContents(contents);
	    return studentResponse;
	}

	@Override
	public StudentResponseDto addNewStudent(StudentRequestDto studentDto) {
		Student student = mapper.map(studentDto, Student.class);
		Student dbStudent = studentRepo.save(student);
		return mapper.map(dbStudent, StudentResponseDto.class);
	}

	private Student studentRequestDtoToStudent(StudentRequestDto studentDto) {
		Student student = new Student();
		student.setFirstName(studentDto.getFirstName());
		student.setLastName(studentDto.getLastName());
		student.setRollNumber(studentDto.getRollNumber());
		student.setAge(studentDto.getAge());
		student.setEmail(studentDto.getEmail());
		return student;
	}

	private StudentResponseDto studentToStudentResponseDto(Student student) {
		StudentResponseDto dto = new StudentResponseDto();
		dto.setFirstName(student.getFirstName());
		dto.setLastName(student.getLastName());
		return dto;
	}

	@Override
	public Optional<Student> readStudentById(int studentId) {
		return studentRepo.findById(studentId);
	}

	@Override
	public List<Student> readStudentsByName(String firstName) {
		return studentRepo.findByFirstName(firstName);
	}

}

package com.tss.jpa.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.tss.jpa.dto.StudentRequestDto;
import com.tss.jpa.dto.StudentResponseDto;
import com.tss.jpa.dto.StudentResponsePage;
import com.tss.jpa.entity.Student;
import com.tss.jpa.exception.StudentApiException;
import com.tss.jpa.repository.StudentRepository;

import jakarta.validation.Valid;

@Service
public class StudentServiceImpl implements StudentService {

    @Autowired
    private StudentRepository studentRepo;

    @Autowired
    private ModelMapper mapper;

    private void validatePagination(int pagesize, int pageno) {
        if (pagesize <= 0) {
            throw new StudentApiException("Page size must be greater than 0.");
        }
        if (pageno < 0) {
            throw new StudentApiException("Page number cannot be negative.");
        }
    }

    @Override
    public StudentResponsePage readAllStudents(int pagesize, int pageno) {
        validatePagination(pagesize, pageno);

        Pageable pageable = PageRequest.of(pageno, pagesize);
        Page<Student> studentPage = studentRepo.findAll(pageable);

        StudentResponsePage studentResponse = new StudentResponsePage();
        studentResponse.setTotalElements(studentPage.getTotalElements());
        studentResponse.setSize(studentPage.getSize());
        studentResponse.setTotalPages(studentPage.getTotalPages());
        studentResponse.setLastPage(studentPage.isLast());

        List<StudentResponseDto> contents = new ArrayList<>();
        for (Student student : studentPage.getContent()) {
            contents.add(studentToStudentResponseDto(student));
        }
        studentResponse.setContents(contents);
        return studentResponse;
    }

    @Override
    public StudentResponseDto addNewStudent(@Valid StudentRequestDto studentDto) {
        // Check duplicate roll number
        if (studentRepo.existsByRollNumber(studentDto.getRollNumber())) {
            throw new StudentApiException("Duplicate roll number: " + studentDto.getRollNumber());
        }

        // Check duplicate email
        if (studentRepo.existsByEmail(studentDto.getEmail())) {
            throw new StudentApiException("Duplicate email: " + studentDto.getEmail());
        }

        try {
            Student student = mapper.map(studentDto, Student.class);
            Student dbStudent = studentRepo.save(student);
            return mapper.map(dbStudent, StudentResponseDto.class);
        } catch (DataIntegrityViolationException ex) {
            throw new StudentApiException("Database constraint violation: " + ex.getMessage());
        } catch (Exception ex) {
            throw new StudentApiException("Unexpected error while saving student: " + ex.getMessage());
        }
    }

    private StudentResponseDto studentToStudentResponseDto(Student student) {
        StudentResponseDto dto = new StudentResponseDto();
        dto.setFirstName(student.getFirstName());
        dto.setLastName(student.getLastName());
        dto.setEmail(student.getEmail());
        dto.setRollNumber(student.getRollNumber());
        dto.setAge(student.getAge());
        return dto;
    }

    @Override
    public Optional<Student> readStudentById(int studentId) {
        return studentRepo.findById(studentId);
    }

    @Override
    public List<Student> readStudentsByName(String firstName) {
        List<Student> students = studentRepo.findByFirstName(firstName);
        if (students.isEmpty()) {
            throw new StudentApiException("No students found with firstName: " + firstName);
        }
        return students;
    }
}
